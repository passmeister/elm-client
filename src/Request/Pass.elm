{-
   Demo Client for Passmeister Apple Wallet and Google Wallet API
   [www.passmeister.com](https://www.passmeister.com).

   OpenAPI spec version: 1.0.0
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Pass exposing (createOrUpdatePass, deletePass, getPass, passList, passSync)

import Http
import Json.Decode as Decode


basePath : String
basePath =
    "https://localhost"


{-
   This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
-}
createOrUpdatePass : Http.Request ()
createOrUpdatePass =
    { method = "POST"
    , url = basePath ++ "/pass"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Delete pass by pass id.
-}
deletePass : Http.Request ()
deletePass =
    { method = "DELETE"
    , url = basePath ++ "/pass"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Get pass information by pass id.
-}
getPass : Http.Request ()
getPass =
    { method = "GET"
    , url = basePath ++ "/pass"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   Retrieve the list of active pass ids for a given pass type.
-}
passList : Http.Request ()
passList =
    { method = "GET"
    , url = basePath ++ "/pass/list"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
-}
passSync : Http.Request ()
passSync =
    { method = "POST"
    , url = basePath ++ "/pass/sync"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


